Problem 1.
import java.util.Scanner;

public class SquareRootCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        String input = scanner.nextLine();

        try {
            double number = Double.parseDouble(input);
            if (number < 0) {
                throw new IllegalArgumentException("Cannot calculate the square root of a negative number.");
            }
            double sqrt = Math.sqrt(number);
            System.out.println("Square Root: " + sqrt);
        } catch (NumberFormatException e) {
            System.out.println("Error: Invalid input. Please enter a valid number.");
        } catch (IllegalArgumentException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
Problem 2.
import java.util.Scanner;

class InsufficientBalanceException extends Exception {
    public InsufficientBalanceException(String message) {
        super(message);
    }
}

class InvalidPinException extends Exception {
    public InvalidPinException(String message) {
        super(message);
    }
}

public class ATMWithdrawalSystem {
    private static final int CORRECT_PIN = 1234;
    private static double balance = 3000;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            System.out.print("Enter PIN: ");
            int pin = scanner.nextInt();

            if (pin != CORRECT_PIN) {
                throw new InvalidPinException("Invalid PIN. Access denied.");
            }

            System.out.print("Withdraw Amount: ");
            double amount = scanner.nextDouble();

            if (amount > balance) {
                throw new InsufficientBalanceException("Insufficient balance. Current Balance: " + balance);
            }

            balance -= amount;
            System.out.println("Withdrawal successful. Remaining Balance: " + balance);

        } catch (InvalidPinException | InsufficientBalanceException e) {
            System.out.println("Error: " + e.getMessage());
        } catch (Exception e) {
            System.out.println("Error: Invalid input. Please try again.");
        } finally {
            System.out.println("Thank you for using the ATM. Current Balance: " + balance);
        }
    }
}
Problem 3.
import java.util.Scanner;

class CourseFullException extends Exception {
    public CourseFullException(String message) {
        super(message);
    }
}

class PrerequisiteNotMetException extends Exception {
    public PrerequisiteNotMetException(String message) {
        super(message);
    }
}

class Student {
    private String name;
    private boolean hasCompletedPrerequisite;

    public Student(String name, boolean hasCompletedPrerequisite) {
        this.name = name;
        this.hasCompletedPrerequisite = hasCompletedPrerequisite;
    }

    public void enrollInCourse(String courseName, String prerequisite) throws CourseFullException, PrerequisiteNotMetException {
        if (!hasCompletedPrerequisite) {
            throw new PrerequisiteNotMetException("Complete " + prerequisite + " before enrolling in " + courseName + ".");
        }

        // Simulate course capacity check
        int courseCapacity = 50;
        int enrolledStudents = 45; // Example value
        if (enrolledStudents >= courseCapacity) {
            throw new CourseFullException("Course " + courseName + " is full.");
        }

        System.out.println("Enrollment successful for " + courseName + ".");
    }
}

public class UniversityEnrollmentSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter student name: ");
        String name = scanner.nextLine();

        System.out.print("Has the student completed the prerequisite? (true/false): ");
        boolean hasCompletedPrerequisite = scanner.nextBoolean();
        scanner.nextLine(); // Consume newline

        Student student = new Student(name, hasCompletedPrerequisite);

        System.out.print("Enroll in Course: ");
        String courseName = scanner.nextLine();

        System.out.print("Prerequisite: ");
        String prerequisite = scanner.nextLine();

        try {
            student.enrollInCourse(courseName, prerequisite);
        } catch (CourseFullException | PrerequisiteNotMetException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}
